simplifiedAnswer (The student's answer, simplified): 
    simplify(studentAnswer,'')

vars (Variables used in the student's answer): 
    findvars(simplifiedAnswer)

unexpected_vars (Unexpected variables used in the student's answer):
    filter(x not in setting('expected_vars'), x, vars)

failMaxLength (Is the student's answer too long?):
    if(len(simplifiedAnswer) > setting('maxLength'),
        warn("Your answer is too long");
        multiply_credit(setting('maxlength_credit'),setting('maxlength_warning'))
        true
    ,
        false
    )


failMinLength (Is the student's answer too short?):
    if(len(simplifiedAnswer) < setting('minLength'),
        warn(setting('minlength_warning'));
        multiply_credit(setting('minlength_credit'),setting('minlength_warning'))
        true
    ,
        false
    )

equal (Is the student's answer numerically equivalent to the expected answer?): 
    if(compare(simplifiedAnswer, setting('correctAnswer'), ...),
        correct("Your answer is numerically correct");
        true,
    // otherwise
        incorrect("Your answer is not numerically correct"); 
        end()
    )

forbiddenStrings_used (Forbidden strings present in the student's answer): 
    let(used, filter(x in simplifiedAnswer, x, setting('forbidden_strings')),
        if(len(used)>0,
            warn(setting('forbiddenString_warning';
            multiply_credit( setting('forbiddenString_credit'), setting('forbiddenString_warning'));
            true
        ,
            false
        )
    )

requiredStrings_not_used (Required strings not present in the student's answer): 
    let(used, filter(not (x in simplifiedAnswer), x, setting('required_strings')),
        if(len(used)>0,
            warn(setting('requiredString_warning',
            multiply_credit( setting('requiredString_credit'), setting('requiredString_warning'))
            true
        ,
            false
        )
    )

mark:
    assert(len(simplifiedAnswer)>0,
        fail("You did not enter an answer")
    );
    assert(evaluate(simplifiedAnswer, dict(map([x,0], x, vars))),
        fail("Your answer is not a valid mathematical expression")
    );
    apply(equal);
    apply(failMaxLength);
    apply(failMinLength);
    apply(forbiddenStrings_used);
    apply(requiredStrings_not_used);

as_jme: expr(simplifiedAnswer)
